#!/usr/bin/env python3
# Copyright (C) @subinps
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
from utils import LOGGER
from contextlib import suppress
from config import Config
import calendar
import pytz
from datetime import datetime
import asyncio
import os
from pyrogram.errors.exceptions.bad_request_400 import (
    MessageIdInvalid, 
    MessageNotModified
)
from pyrogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from utils import (
    cancel_all_schedules,
    edit_config, 
    is_admin, 
    leave_call, 
    restart,
    restart_playout,
    stop_recording, 
    sync_to_db,
    update, 
    is_admin, 
    chat_filter,
    sudo_filter,
    delete_messages,
    seek_file
)
from pyrogram import (
    Client, 
    filters
)

IST = pytz.timezone(Config.TIME_ZONE)
if Config.DATABASE_URI:
    from utils import db

HOME_TEXT = "<b>Hey  [{}](tg://user?id={}) üôã‚Äç‚ôÇÔ∏è\n\nT√¥i l√† Bot ƒë∆∞·ª£c x√¢y d·ª±ng ƒë·ªÉ ph√°t ho·∫∑c ph√°t tr·ª±c tuy·∫øn video trong Telegram VoiceChats..\nT√¥i c√≥ th·ªÉ ph√°t tr·ª±c tuy·∫øn b·∫•t k·ª≥ video n√†o tr√™n YouTube ho·∫∑c t·ªáp Telegram ho·∫∑c th·∫≠m ch√≠ l√† tr·ª±c ti·∫øp tr√™n YouTube.</b>"
admin_filter=filters.create(is_admin) 

@Client.on_message(filters.command(['start', f"start@{Config.BOT_USERNAME}"]))
async def start(client, message):
    if len(message.command) > 1:
        if message.command[1] == 'help':
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(f"Play", callback_data='help_play'),
                        InlineKeyboardButton(f"C√†i ƒë·∫∑t", callback_data=f"help_settings"),
                        InlineKeyboardButton(f"Ghi l·∫°i", callback_data='help_record'),
                    ],
                    [
                        InlineKeyboardButton("L·∫≠p l·ªãch tr√¨nh", callback_data="help_schedule"),
                        InlineKeyboardButton("Ki·ªÉm so√°t", callback_data='help_control'),
                        InlineKeyboardButton("Admins", callback_data="help_admin"),
                    ],
                    [
                        InlineKeyboardButton(f"Linh tinh", callback_data='help_misc'),
                        InlineKeyboardButton("Close", callback_data="close"),
                    ],
                ]
                )
            await message.reply("T√¨m hi·ªÉu c√°ch s·ª≠ d·ª•ng. Hi·ªÉn th·ªã menu tr·ª£ gi√∫p, Ch·ªçn t·ª´ c√°c t√πy ch·ªçn b√™n d∆∞·ªõi.",
                reply_markup=reply_markup,
                disable_web_page_preview=True
                )
        elif 'sch' in message.command[1]:
            msg=await message.reply("Ki·ªÉm tra l·ªãch tr√¨nh..")
            you, me = message.command[1].split("_", 1)
            who=Config.SCHEDULED_STREAM.get(me)
            if not who:
                return await msg.edit("M·ªôt c√°i g√¨ ƒë√≥ ƒë√£ bi·∫øn m·∫•t ·ªü ƒë√¢u ƒë√≥.")
            del Config.SCHEDULED_STREAM[me]
            whom=f"{message.chat.id}_{msg.message_id}"
            Config.SCHEDULED_STREAM[whom] = who
            await sync_to_db()
            if message.from_user.id not in Config.ADMINS:
                return await msg.edit("OK da")
            today = datetime.now(IST)
            smonth=today.strftime("%B")
            obj = calendar.Calendar()
            thisday = today.day
            year = today.year
            month = today.month
            m=obj.monthdayscalendar(year, month)
            button=[]
            button.append([InlineKeyboardButton(text=f"{str(smonth)}  {str(year)}",callback_data=f"sch_month_choose_none_none")])
            days=["Mon", "Tues", "Wed", "Thu", "Fri", "Sat", "Sun"]
            f=[]
            for day in days:
                f.append(InlineKeyboardButton(text=f"{day}",callback_data=f"day_info_none"))
            button.append(f)
            for one in m:
                f=[]
                for d in one:
                    year_=year
                    if d < int(today.day):
                        year_ += 1
                    if d == 0:
                        k="\u2063"   
                        d="none"   
                    else:
                        k=d    
                    f.append(InlineKeyboardButton(text=f"{k}",callback_data=f"sch_month_{year_}_{month}_{d}"))
                button.append(f)
            button.append([InlineKeyboardButton("Close", callback_data="schclose")])
            await msg.edit(f"Ch·ªçn ng√†y trong th√°ng b·∫°n mu·ªën l√™n l·ªãch tr√≤ chuy·ªán tho·∫°i.\nToday is {thisday} {smonth} {year}. Chooosing a date preceeding today will be considered as next year {year+1}", reply_markup=InlineKeyboardMarkup(button))



        return
    buttons = [
        [
            InlineKeyboardButton('‚öôÔ∏è Nh√≥m', url='https://t.me/vietnamhub'),
            InlineKeyboardButton('üß© K√™nh', url='https://t.me/joinchat/ug0cFfrfD3Q1MDll')
        ],
        [
            InlineKeyboardButton('üë®üèº‚Äçü¶Ø C√¥ng c·ª•', callback_data='help_play'),
            InlineKeyboardButton('üóë ƒê√≥ng', callback_data='close'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    k = await message.reply(HOME_TEXT.format(message.from_user.first_name, message.from_user.id), reply_markup=reply_markup)
    await delete_messages([message, k])



@Client.on_message(filters.command(["help", f"help@{Config.BOT_USERNAME}"]))
async def show_help(client, message):
    reply_markup=InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton("Play", callback_data='help_play'),
                InlineKeyboardButton("C√†i ƒë·∫∑t", callback_data=f"help_settings"),
                InlineKeyboardButton("Ghi h√¨nh", callback_data='help_record'),
            ],
            [
                InlineKeyboardButton("L√™n l·ªãch", callback_data="help_schedule"),
                InlineKeyboardButton("Ki·ªÉm so√°t", callback_data='help_control'),
                InlineKeyboardButton("Admins", callback_data="help_admin"),
            ],
            [
                InlineKeyboardButton("Linh tinh", callback_data='help_misc'),
                InlineKeyboardButton("Config Vars", callback_data='help_env'),
                InlineKeyboardButton("ƒê√≥ng", callback_data="close"),
            ],
        ]
        )
    if message.chat.type != "private" and message.from_user is None:
        k=await message.reply(
            text="T√¥i kh√¥ng th·ªÉ gi√∫p b·∫°n ·ªü ƒë√¢y, v√¨ b·∫°n l√† qu·∫£n tr·ªã vi√™n ·∫©n danh. Nh·∫≠n tr·ª£ gi√∫p trong PM",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(f"Tr·ª£ gi√∫p", url=f"https://telegram.dog/{Config.BOT_USERNAME}?start=help"),
                    ]
                ]
            ),)
        await delete_messages([message, k])
        return
    if Config.msg.get('help') is not None:
        await Config.msg['help'].delete()
    Config.msg['help'] = await message.reply_text(
        "T√¨m hi·ªÉu c√°ch s·ª≠ d·ª•ng. Hi·ªÉn th·ªã menu tr·ª£ gi√∫p, Ch·ªçn t·ª´ c√°c t√πy ch·ªçn b√™n d∆∞·ªõi.",
        reply_markup=reply_markup,
        disable_web_page_preview=True
        )
    #await delete_messages([message])
@Client.on_message(filters.command(['repo', f"repo@{Config.BOT_USERNAME}"]))
async def repo_(client, message):
    buttons = [
        [
            InlineKeyboardButton('üß© K√™nh', url='https://t.me/vietnamhub'),
            InlineKeyboardButton('‚öôÔ∏è Nh√≥m', url='https://t.me/joinchat/ug0cFfrfD3Q1MDll'),     
        ],
        [
            InlineKeyboardButton("Box ch√°t ‚ù§", url='http://t.me/joinchat/BvHYpFNhr9o1M2Y9'),
            InlineKeyboardButton('üóë ƒê√≥ng', callback_data='close'),
        ]
    ]
    await message.reply("<b>ss.\nB·∫°n c√≥ th·ªÉ tri·ªÉn khai bot c·ªßa ri√™ng m√¨nh v√† s·ª≠ d·ª•ng trong nh√≥m c·ªßa m√¨nh. üôÉ.</b>", reply_markup=InlineKeyboardMarkup(buttons), disable_web_page_preview=True)
    await delete_messages([message])

@Client.on_message(filters.command(['restart', 'update', f"restart@{Config.BOT_USERNAME}", f"update@{Config.BOT_USERNAME}"]) & admin_filter & chat_filter)
async def update_handler(client, message):
    if Config.HEROKU_APP:
        k = await message.reply("ƒê√£ t√¨m th·∫•y ·ª©ng d·ª•ng, ƒëang kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ c·∫≠p nh·∫≠t.")
        if Config.DATABASE_URI:
            msg = {"msg_id":k.message_id, "chat_id":k.chat.id}
            if not await db.is_saved("RESTART"):
                db.add_config("RESTART", msg)
            else:
                await db.edit_config("RESTART", msg)
            await sync_to_db()
    else:
        k = await message.reply("Kh√¥ng t√¨m th·∫•y APP, ƒëang c·ªë g·∫Øng kh·ªüi ƒë·ªông l·∫°i.")
        if Config.DATABASE_URI:
            msg = {"msg_id":k.message_id, "chat_id":k.chat.id}
            if not await db.is_saved("RESTART"):
                db.add_config("RESTART", msg)
            else:
                await db.edit_config("RESTART", msg)
    try:
        await message.delete()
    except:
        pass
    await update()

@Client.on_message(filters.command(['logs', f"logs@{Config.BOT_USERNAME}"]) & admin_filter & chat_filter)
async def get_logs(client, message):
    m=await message.reply("Checking logs..")
    if os.path.exists("botlog.txt"):
        await message.reply_document('botlog.txt', caption="Bot Logs")
        await m.delete()
        await delete_messages([message])
    else:
        k = await m.edit("Kh√¥ng t√¨m th·∫•y t·ªáp nh·∫≠t k√Ω.")
        await delete_messages([message, k])

@Client.on_message(filters.command(['env', f"env@{Config.BOT_USERNAME}", "config", f"config@{Config.BOT_USERNAME}"]) & sudo_filter & chat_filter)
async def set_heroku_var(client, message):
    with suppress(MessageIdInvalid, MessageNotModified):
        m = await message.reply("Ki·ªÉm tra c√°c vars c·∫•u h√¨nh..")
        if " " in message.text:
            cmd, env = message.text.split(" ", 1)
            if "=" in env:
                var, value = env.split("=", 1)
            else:
                if env == "STARTUP_STREAM":
                    env_ = "STREAM_URL"
                elif env == "QUALITY":
                    env_ = "CUSTOM_QUALITY" 
                else:
                    env_ = env
                ENV_VARS = ["ADMINS", "SUDO", "CHAT", "LOG_GROUP", "STREAM_URL", "SHUFFLE", "ADMIN_ONLY", "REPLY_MESSAGE", 
                        "EDIT_TITLE", "RECORDING_DUMP", "RECORDING_TITLE", "IS_VIDEO", "IS_LOOP", "DELAY", "PORTRAIT", 
                        "IS_VIDEO_RECORD", "PTN", "CUSTOM_QUALITY"]
                if env_ in ENV_VARS:
                    await m.edit(f"Gi√° tr·ªã hi·ªán t·∫°i cho `{env}`  is `{getattr(Config, env_)}`")
                    await delete_messages([message])
                    return
                else:
                    await m.edit("ƒê√¢y l√† m·ªôt gi√° tr·ªã env kh√¥ng h·ª£p l·ªá. ƒê·ªçc tr·ª£ gi√∫p tr√™n env ƒë·ªÉ bi·∫øt v·ªÅ c√°c env c√≥ s·∫µn.")
                    await delete_messages([message, m])
                    return     
            
        else:
            await m.edit("B·∫°n ch∆∞a cung c·∫•p b·∫•t k·ª≥ gi√° tr·ªã n√†o cho env, b·∫°n n√™n l√†m theo ƒë√∫ng ƒë·ªãnh d·∫°ng.\nExample: <code>/env CHAT=-1020202020202</code> ƒë·ªÉ thay ƒë·ªïi ho·∫∑c ƒë·∫∑t CHAT var.\n<code>/env REPLY_MESSAGE= <code>To delete REPLY_MESSAGE.")
            await delete_messages([message, m])
            return

        if Config.DATABASE_URI and var in ["STARTUP_STREAM", "CHAT", "LOG_GROUP", "REPLY_MESSAGE", "DELAY", "RECORDING_DUMP", "QUALITY"]:      
            await m.edit("Mongo DB Found, thi·∫øt l·∫≠p c·∫•u h√¨nh vars...")
            await asyncio.sleep(2)  
            if not value:
                await m.edit(f"Kh√¥ng c√≥ gi√° tr·ªã cho env ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh. ƒêang c·ªë g·∫Øng x√≥a env {var}.")
                await asyncio.sleep(2)
                if var in ["STARTUP_STREAM", "CHAT", "DELAY"]:
                    await m.edit("ƒê√¢y l√† var b·∫Øt bu·ªôc v√† kh√¥ng th·ªÉ x√≥a.")
                    await delete_messages([message, m]) 
                    return
                await edit_config(var, False)
                await m.edit(f"ƒê√£ x√≥a th√†nh c√¥ng{var}")
                await delete_messages([message, m])           
                return
            else:
                if var in ["CHAT", "LOG_GROUP", "RECORDING_DUMP", "QUALITY"]:
                    try:
                        value=int(value)
                    except:
                        if var == "QUALITY":
                            if not value.lower() in ["low", "medium", "high"]:
                                await m.edit("B·∫°n n√™n ch·ªâ ƒë·ªãnh m·ªôt gi√° tr·ªã t·ª´ 10 - 100.")
                                await delete_messages([message, m])
                                return
                            else:
                                value = value.lower()
                                if value == "high":
                                    value = 100
                                elif value == "medium":
                                    value = 66.9
                                elif value == "low":
                                    value = 50
                        else:
                            await m.edit("B·∫°n n√™n cho t√¥i m·ªôt id tr√≤ chuy·ªán. N√≥ ph·∫£i l√† m·ªôt interger.")
                            await delete_messages([message, m])
                            return
                    if var == "CHAT":
                        await leave_call()
                        Config.ADMIN_CACHE=False
                        if Config.IS_RECORDING:
                            await stop_recording()
                        await cancel_all_schedules()
                        Config.CHAT=int(value)
                        await restart()
                    await edit_config(var, int(value))
                    if var == "QUALITY":
                        if Config.CALL_STATUS:
                            data=Config.DATA.get('FILE_DATA')
                            if not data \
                                or data.get('dur', 0) == 0:
                                await restart_playout()
                                return
                            k, reply = await seek_file(0)
                            if k == False:
                                await restart_playout()
                    await m.edit(f"ƒê√£ thay ƒë·ªïi th√†nh c√¥ng {var} th√†nh {value}")
                    await delete_messages([message, m])
                    return
                else:
                    if var == "STARTUP_STREAM":
                        Config.STREAM_SETUP=False
                    await edit_config(var, value)
                    await m.edit(f"ƒê√£ thay ƒë·ªïi th√†nh c√¥ng {var} th√†nh {value}")
                    await delete_messages([message, m])
                    await restart_playout()
                    return
        else:
            if not Config.HEROKU_APP:
                buttons = [[InlineKeyboardButton('Heroku API_KEY', url='https://dashboard.heroku.com/account/applications/authorizations/new'), InlineKeyboardButton('üóë Close', callback_data='close'),]]
                await m.edit(
                    text="Kh√¥ng t√¨m th·∫•y ·ª©ng d·ª•ng API n√†o, l·ªánh n√†y c·∫ßn thi·∫øt l·∫≠p c√°c vars heroku sau.\n\n1. <code>HEROKU_API_KEY</code>: Kh√≥a api t√†i kho·∫£n heroku c·ªßa b·∫°n.\n2. <code>HEROKU_APP_NAME</code>: T√™n ·ª©ng d·ª•ng heroku c·ªßa b·∫°n.", 
                    reply_markup=InlineKeyboardMarkup(buttons)) 
                await delete_messages([message])
                return     
            config = Config.HEROKU_APP.config()
            if not value:
                await m.edit(f"No value for env specified. Trying to delete env {var}.")
                await asyncio.sleep(2)
                if var in ["STARTUP_STREAM", "CHAT", "DELAY", "API_ID", "API_HASH", "BOT_TOKEN", "SESSION_STRING", "ADMINS"]:
                    await m.edit("ƒê√¢y l√† nh·ªØng vars b·∫Øt bu·ªôc v√† kh√¥ng th·ªÉ x√≥a.")
                    await delete_messages([message, m])
                    return
                if var in config:
                    await m.edit(f"ƒê√£ x√≥a th√†nh c√¥ng {var}")
                    await asyncio.sleep(2)
                    await m.edit("B√¢y gi·ªù kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ th·ª±c hi·ªán thay ƒë·ªïi.")
                    if Config.DATABASE_URI:
                        msg = {"msg_id":m.message_id, "chat_id":m.chat.id}
                        if not await db.is_saved("RESTART"):
                            db.add_config("RESTART", msg)
                        else:
                            await db.edit_config("RESTART", msg)
                    del config[var]                
                    config[var] = None               
                else:
                    k = await m.edit(f"Kh√¥ng t√¨m th·∫•y c√≥ env n√†o ƒë∆∞·ª£c ƒë·∫∑t t√™n {var}. Kh√¥ng c√≥ g√¨ ƒë∆∞·ª£c thay ƒë·ªïi.")
                    await delete_messages([message, k])
                return
            if var in config:
                await m.edit(f"ƒê√£ t√¨m th·∫•y bi·∫øn. Hi·ªán ƒë√£ ƒë∆∞·ª£c ch·ªânh s·ª≠a th√†nh {value}")
            else:
                await m.edit(f"Kh√¥ng t√¨m th·∫•y bi·∫øn, Hi·ªán ƒëang ƒë·∫∑t l√†m var m·ªõi.")
            await asyncio.sleep(2)
            await m.edit(f"ƒê·∫∑t th√†nh c√¥ng {var} v·ªõi gi√° tr·ªã {value}, B√¢y gi·ªù Kh·ªüi ƒë·ªông l·∫°i ƒë·ªÉ thay ƒë·ªïi c√≥ hi·ªáu l·ª±c...")
            if Config.DATABASE_URI:
                msg = {"msg_id":m.message_id, "chat_id":m.chat.id}
                if not await db.is_saved("RESTART"):
                    db.add_config("RESTART", msg)
                else:
                    await db.edit_config("RESTART", msg)
            config[var] = str(value)




